// <auto-generated />
using System;
using DrPetClinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrPetClinic.Data.Migrations
{
    [DbContext(typeof(DrPetClinicDBContext))]
    [Migration("20241127194034_UpdateSeedData1127_3")]
    partial class UpdateSeedData1127_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.Property<Guid>("AnimalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalsId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("AnimalPerson");

                    b.HasData(
                        new
                        {
                            AnimalsId = new Guid("e89ff0f6-39d1-44ed-84fc-76b44d695a08"),
                            OwnersId = new Guid("34a410a5-165f-43f1-89ca-1d5a0619b4b0")
                        },
                        new
                        {
                            AnimalsId = new Guid("0aa53440-cc64-4321-8906-c3f83c0a974a"),
                            OwnersId = new Guid("c7e0e401-6e89-439f-a4e7-ba47118eb789")
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e89ff0f6-39d1-44ed-84fc-76b44d695a08"),
                            BirthDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ő a falu legszorgalmasabb terelője.",
                            Name = "Bodri",
                            Species = "Kutya",
                            Status = "Jó egészségnek örvend",
                            Type = "Puli"
                        },
                        new
                        {
                            Id = new Guid("0aa53440-cc64-4321-8906-c3f83c0a974a"),
                            BirthDate = new DateTime(2019, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A kajáért él-hal, de csak akkor enged közel, ha akar.",
                            Name = "Cirmi",
                            Species = "Macska",
                            Status = "Kissé morcos",
                            Type = "Sziámi"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<byte>("Month")
                        .HasMaxLength(12)
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Week")
                        .HasMaxLength(53)
                        .HasColumnType("tinyint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ConsultationTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("984693c5-aac7-4364-8881-2c1a19422db8"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("1ab429f5-7735-4f1b-99c4-065913a3c92f"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("18808561-d030-4d78-853e-f7a110877789"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("962a8a83-4d62-4ae6-afd3-5f14367ebf85"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("2f829fa5-4ad7-43d1-8b71-660a23467848"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("79bbefd1-81f1-4231-bd59-ffa55547c10e"),
                            DayOfWeek = 1,
                            Description = "Hétfői rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("03b5b8b1-8275-487a-8830-342574414208"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("09d3d346-76be-4e82-986e-6f7556bcf970"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("631c7159-8b8b-4fe8-98b7-0b42f476963e"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ab7c82b8-9537-4702-8d4b-04e522891474"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("135d9b4e-402a-4a4b-8e1b-cb4035d60ef0"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("6598c657-e117-46fe-a303-87fcb96e9ceb"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("eee17568-c810-4a1c-9ff0-2f37e6bd17fe"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("41d1f9d0-4c5d-46d9-a90d-cf0b8469102b"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("cf8a1b92-7e52-45f7-9f4e-04c3a777cc96"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("cdf791e6-6df4-4189-a501-c17c9d3ce4ba"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("5ff6f9e8-2b59-4557-9d2f-b4f833ceb98c"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("a2916a45-b1fa-4b1d-8a44-dcbb46b830cf"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("6c00c3e3-bdf4-4f7f-8a12-5ff90ed366b5"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("fe380ef2-6c5f-4a00-8cd3-53c3933c7c51"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("62546410-e0d7-4a2d-ad59-40844bdfcab5"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("539e725b-008e-4f23-874e-14cab2c358af"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("06093548-864b-4b23-8082-ff5eab3be5e7"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("78d0e0ff-b624-445a-9ea0-e9a22390b6aa"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("84018474-6d27-42ad-a8ae-d2b01fc10a1d"),
                            DayOfWeek = 3,
                            Description = "Szerdai rövid rendelés.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("91807d57-9493-4d12-87ec-91d75cacda31"),
                            DayOfWeek = 3,
                            Description = "Szerdai rövid rendelés.",
                            EmployeeId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            Description = "Szakértő állatorvos.",
                            Name = "Dr. Vakarcs Pál",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("287e9c90-dc34-4461-aef5-1f6bd7ecf753"),
                            Description = "Sebész specialista.",
                            Name = "Dr. Szabó Éva",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("36066897-b9ca-416a-9608-2361f98c8711"),
                            Description = "Egzotikus állatok szakértője.",
                            Name = "Dr. Kiss Tamás",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("65634831-0098-4472-9d6d-a0ff5a2c2bfd"),
                            Description = "A klinika segédje, minden munkában ott van.",
                            Name = "Hajdu Eszter",
                            Type = 2
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Medicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cdabc3c-18df-48ed-9c0a-a58dbe187d10"),
                            Description = "Alapvizsgálat",
                            Length = 30,
                            Medicine = "Védőoltás",
                            TreatmentId = new Guid("8f26559f-aebc-4c5a-a4fd-6232b9d0154f"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34a410a5-165f-43f1-89ca-1d5a0619b4b0"),
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A falu híres állatorvosa.",
                            Name = "Kovács János",
                            Residence = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("c7e0e401-6e89-439f-a4e7-ba47118eb789"),
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kutyakozmetikus, minden kutyát széppé varázsol.",
                            Name = "Szabó Katalin",
                            Residence = "Debrecen"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f26559f-aebc-4c5a-a4fd-6232b9d0154f"),
                            Amount = 15000m,
                            AnimalId = new Guid("e89ff0f6-39d1-44ed-84fc-76b44d695a08"),
                            Date = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rutin vizsgálat",
                            DoctorId = new Guid("af5702fd-b06e-4560-8bad-cfe44b60eb14"),
                            PersonId = new Guid("34a410a5-165f-43f1-89ca-1d5a0619b4b0")
                        });
                });

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Employee")
                        .WithMany("ConsultationTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Entry", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrPetClinic.Data.Entities.Treatment", "Treatment")
                        .WithMany("Entries")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", "Animal")
                        .WithMany("Treatments")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Doctor")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", "Person")
                        .WithMany("Treatments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Navigation("ConsultationTimes");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
