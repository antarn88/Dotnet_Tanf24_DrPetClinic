// <auto-generated />
using System;
using DrPetClinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrPetClinic.Data.Migrations
{
    [DbContext(typeof(DrPetClinicDBContext))]
    [Migration("20241204201720_Add-Identity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.Property<Guid>("AnimalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalsId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("AnimalPerson");

                    b.HasData(
                        new
                        {
                            AnimalsId = new Guid("37ee9f58-a30c-4c9a-9e10-8b5b9dadef91"),
                            OwnersId = new Guid("15663cd5-530e-4f4c-b628-36a0b21f71d1")
                        },
                        new
                        {
                            AnimalsId = new Guid("a49d8156-ac7e-4607-a0e7-fed4c5584cbf"),
                            OwnersId = new Guid("4867bcfe-6032-4de7-8115-c078d7a4a21a")
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37ee9f58-a30c-4c9a-9e10-8b5b9dadef91"),
                            BirthDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ő a falu legszorgalmasabb terelője.",
                            Name = "Bodri",
                            Species = "Kutya",
                            Status = "Jó egészségnek örvend",
                            Type = "Puli"
                        },
                        new
                        {
                            Id = new Guid("a49d8156-ac7e-4607-a0e7-fed4c5584cbf"),
                            BirthDate = new DateTime(2019, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A kajáért él-hal, de csak akkor enged közel, ha akar.",
                            Name = "Cirmi",
                            Species = "Macska",
                            Status = "Kissé morcos",
                            Type = "Sziámi"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<byte>("Month")
                        .HasMaxLength(12)
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Week")
                        .HasMaxLength(53)
                        .HasColumnType("tinyint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ConsultationTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65c7288f-63e9-47d6-9a53-feb153a690a5"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("1143f884-6cca-40bd-9711-2f9706e42860"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("345ee915-4811-41e7-9972-d613de162c8e"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("f753ce79-c09e-4f87-97d9-96502650ab96"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("91157b6d-e939-4293-95a3-236471b9cd3e"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ca18137e-8211-42f8-9d40-be5e9e224a6a"),
                            DayOfWeek = 1,
                            Description = "Hétfői rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("2ca60f97-6601-4b1e-a892-f32d1f109d2e"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("d383d2a8-3591-482b-9441-610a62a7910b"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("293544f4-6c0e-4767-acd1-997ff5c33fe6"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("e3a74f74-02e0-42a0-a55d-38a5596c5cbb"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("0fb7212a-99d3-41af-a323-ecc1273b9ac9"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("528b6ee5-7839-44e3-b98f-aedc7e2d6aa3"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("cc35bdeb-8115-4759-b4db-8a526e53240b"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ed3d47a2-3f2b-4dce-9ee2-d5bc4b7e0d44"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ef941b35-d326-4086-aa17-08767fad7169"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("67bd0c90-50cb-40a2-98cf-ccf08bd2e341"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("eb4238ee-0a4b-4a96-ad96-77f73162e0a6"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("f1246005-2788-4a25-8572-b7feb7a12ce9"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("946ecf2a-1c0e-415c-bcb8-eb124a1079fd"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("04b86a9a-990a-467f-bf52-b282d7dcbe58"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("c8f758c9-2ad8-4701-b44c-c7bf8a0bd074"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("b7d18393-6dc7-4dac-87d1-4b90cfb3ecf2"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ad9d9f61-74d1-471f-9428-3f2e651cdd1c"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("c537a72a-aa0e-4ff6-9481-41ca4516aec0"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("369a96e8-6eda-486f-84e2-c84427863ae6"),
                            DayOfWeek = 3,
                            Description = "Szerdai rövid rendelés.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ff58baec-27ea-4288-b718-c02470b623df"),
                            DayOfWeek = 3,
                            Description = "Szerdai rövid rendelés.",
                            EmployeeId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5156e697-3dfe-419e-a2e9-972071b58853",
                            Description = "Szakértő állatorvos.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Vakarcs Pál",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b5ff8827-c827-484a-ab27-84ce6d67ca9f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c38afb1a-2933-41da-abcc-fffde02e5edc",
                            Description = "Sebész specialista.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Szabó Éva",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2069c9ad-3379-4f82-98f6-8abb1a20190c",
                            Description = "Egzotikus állatok szakértője.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Kiss Tamás",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("8b7f7681-8f97-443f-bea3-c875c3fe0be2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ac6a7bd-01a0-42a9-b9bf-68d3efe9b8d4",
                            Description = "A klinika segédje, minden munkában ott van.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hajdu Eszter",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 2
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Medicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75a4d509-b71e-4f36-91a5-737947b92f22"),
                            Description = "Alapvizsgálat",
                            Length = 30,
                            Medicine = "Védőoltás",
                            TreatmentId = new Guid("dda73405-2147-490f-832b-20d2f9215e46"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15663cd5-530e-4f4c-b628-36a0b21f71d1"),
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A falu híres állatorvosa.",
                            Name = "Kovács János",
                            Residence = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("4867bcfe-6032-4de7-8115-c078d7a4a21a"),
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kutyakozmetikus, minden kutyát széppé varázsol.",
                            Name = "Szabó Katalin",
                            Residence = "Debrecen"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dda73405-2147-490f-832b-20d2f9215e46"),
                            Amount = 15000m,
                            AnimalId = new Guid("37ee9f58-a30c-4c9a-9e10-8b5b9dadef91"),
                            Date = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rutin vizsgálat",
                            DoctorId = new Guid("9fa5fd43-6c43-435e-a132-246e1b92fc31"),
                            PersonId = new Guid("15663cd5-530e-4f4c-b628-36a0b21f71d1")
                        },
                        new
                        {
                            Id = new Guid("61156665-4e3e-477a-8629-bb5b96499a5e"),
                            Amount = 30000m,
                            AnimalId = new Guid("a49d8156-ac7e-4607-a0e7-fed4c5584cbf"),
                            Date = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bolhaírtás",
                            DoctorId = new Guid("05fc838e-09f4-405c-b444-3908f02cbc8f"),
                            PersonId = new Guid("4867bcfe-6032-4de7-8115-c078d7a4a21a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Employee")
                        .WithMany("ConsultationTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Entry", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrPetClinic.Data.Entities.Treatment", "Treatment")
                        .WithMany("Entries")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", "Animal")
                        .WithMany("Treatments")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Doctor")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", "Person")
                        .WithMany("Treatments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Navigation("ConsultationTimes");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
