// <auto-generated />
using System;
using DrPetClinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrPetClinic.Data.Migrations
{
    [DbContext(typeof(DrPetClinicDBContext))]
    [Migration("20241226141007_AddImageUrlProp")]
    partial class AddImageUrlProp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.Property<Guid>("AnimalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalsId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("AnimalPerson");

                    b.HasData(
                        new
                        {
                            AnimalsId = new Guid("ff6c74a4-efdb-4ed4-89a6-6a62b6fdd54f"),
                            OwnersId = new Guid("1a21d10b-3b18-4165-ba72-c2bd3fc39b20")
                        },
                        new
                        {
                            AnimalsId = new Guid("fdfab8ba-e126-415f-bbed-f9f0276fab95"),
                            OwnersId = new Guid("2e008dc3-6dc8-4632-93ef-4a77dc48dadc")
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff6c74a4-efdb-4ed4-89a6-6a62b6fdd54f"),
                            BirthDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ő a falu legszorgalmasabb terelője.",
                            Name = "Bodri",
                            Species = "Kutya",
                            Status = "Jó egészségnek örvend",
                            Type = "Puli"
                        },
                        new
                        {
                            Id = new Guid("fdfab8ba-e126-415f-bbed-f9f0276fab95"),
                            BirthDate = new DateTime(2019, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A kajáért él-hal, de csak akkor enged közel, ha akar.",
                            Name = "Cirmi",
                            Species = "Macska",
                            Status = "Kissé morcos",
                            Type = "Sziámi"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<byte>("Month")
                        .HasMaxLength(12)
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Week")
                        .HasMaxLength(53)
                        .HasColumnType("tinyint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ConsultationTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0350634-15d9-4229-8e23-9493e3cdedae"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("707c18a9-3a8c-4d16-b071-0bd4acc8054f"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("4b77460e-a04a-4108-9efa-27511bd6fb27"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("a11773ba-f325-4e4a-8868-7f6648a970bc"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("4185da50-f91e-486e-acd1-055b7a010c9b"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("5f618221-34da-4abf-afd9-922837ff757c"),
                            DayOfWeek = 1,
                            Description = "Hétfői rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("77c4d25a-4451-48ea-9e92-281606a21f69"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("84cde399-ed4c-433f-ba24-181be8074109"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("1e7c4685-a348-4f83-8dce-fb2b425e7996"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("6ee3e4ee-0af8-43d2-9a96-31b749a7ed38"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("2a037cfb-c931-4046-9155-93f777a97049"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("7fe1aa78-cf54-4a8c-ad1a-8e95cea0ae70"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("00109ad6-452f-4848-83ec-15ed7072629b"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("e6924845-940d-48b3-847c-7f95ed4567de"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("e999a369-dbba-4fa2-a689-afb839b47347"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("8da869b5-f654-42f3-968b-4ddedebdf337"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("67095a0a-b9c1-4a77-8cd1-2312e92b7b31"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("aeff1ab7-f633-4e7a-be25-e03255a7322a"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("460234b2-c683-4ccb-aa87-d99b3ae03e65"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("a88f4a14-82e7-437f-9af3-a6b6d3189888"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("9b5b81f4-7a2b-485e-82a5-1967340aaec8"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("5ed7f0a2-9ccf-4432-9a57-bfd262c26e9c"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("223eb87b-0878-40e1-8468-2e77c151ab8d"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("7e7d98f9-8700-4630-913d-f275b4538d3d"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("550f88f3-c2ad-4549-b340-6849e236d857"),
                            DayOfWeek = 3,
                            Description = "Szerdai rövid rendelés.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("e0002892-001c-4b17-8395-a05c35fb40f6"),
                            DayOfWeek = 3,
                            Description = "Szerdai rövid rendelés.",
                            EmployeeId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec457b43-aa7f-4179-9061-9e2cf4c37eac",
                            Description = "Szakértő állatorvos.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Vakarcs Pál",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("0a317ff8-ce7f-48b4-9e61-c7a97bd9f3dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6065c27-4ba0-44d8-b9a3-5109346a9efb",
                            Description = "Sebész specialista.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Szabó Éva",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fa459b6-f2ac-40e3-b80b-3b3f88516a7f",
                            Description = "Egzotikus állatok szakértője.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dr. Kiss Tamás",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2cb98491-25f9-4506-a95d-b5e1f982eee1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a130b2f8-d9e4-4bf9-99a1-c32be336c7ab",
                            Description = "A klinika segédje, minden munkában ott van.",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hajdu Eszter",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Type = 2
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Medicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbe88c8d-0f0d-479d-a388-18f6a4027b67"),
                            Description = "Alapvizsgálat",
                            Length = 30,
                            Medicine = "Védőoltás",
                            TreatmentId = new Guid("4a6d5778-1c8c-414d-9fd5-ad16159833b3"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a21d10b-3b18-4165-ba72-c2bd3fc39b20"),
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A falu híres állatorvosa.",
                            Name = "Kovács János",
                            Residence = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("2e008dc3-6dc8-4632-93ef-4a77dc48dadc"),
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kutyakozmetikus, minden kutyát széppé varázsol.",
                            Name = "Szabó Katalin",
                            Residence = "Debrecen"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a6d5778-1c8c-414d-9fd5-ad16159833b3"),
                            Amount = 15000m,
                            AnimalId = new Guid("ff6c74a4-efdb-4ed4-89a6-6a62b6fdd54f"),
                            Date = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rutin vizsgálat",
                            DoctorId = new Guid("c9d476e9-ef43-4b0a-b9dc-b596de49d8b0"),
                            PersonId = new Guid("1a21d10b-3b18-4165-ba72-c2bd3fc39b20")
                        },
                        new
                        {
                            Id = new Guid("d1a02358-3b79-4dd2-a828-b9d58a888c91"),
                            Amount = 30000m,
                            AnimalId = new Guid("fdfab8ba-e126-415f-bbed-f9f0276fab95"),
                            Date = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bolhaírtás",
                            DoctorId = new Guid("8fa60f46-1914-4e56-966b-f7a5f4d01b25"),
                            PersonId = new Guid("2e008dc3-6dc8-4632-93ef-4a77dc48dadc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Employee")
                        .WithMany("ConsultationTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Entry", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrPetClinic.Data.Entities.Treatment", "Treatment")
                        .WithMany("Entries")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", "Animal")
                        .WithMany("Treatments")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Doctor")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", "Person")
                        .WithMany("Treatments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Navigation("ConsultationTimes");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
