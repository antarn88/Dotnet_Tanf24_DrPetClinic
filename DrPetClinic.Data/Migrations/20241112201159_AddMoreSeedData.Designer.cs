// <auto-generated />
using System;
using DrPetClinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrPetClinic.Data.Migrations
{
    [DbContext(typeof(DrPetClinicDBContext))]
    [Migration("20241112201159_AddMoreSeedData")]
    partial class AddMoreSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.Property<Guid>("AnimalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalsId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("AnimalPerson");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("487bfce6-86ba-4819-816a-a088dc4257c9"),
                            BirthDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ő a falu legszorgalmasabb terelője.",
                            Name = "Bodri",
                            Species = "Kutya",
                            Status = "Jó egészségnek örvend",
                            Type = "Puli"
                        },
                        new
                        {
                            Id = new Guid("e9346cfe-fbbc-4807-bf6a-5974f0e6ee7e"),
                            BirthDate = new DateTime(2019, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A kajáért él-hal, de csak akkor enged közel, ha akar.",
                            Name = "Cirmi",
                            Species = "Macska",
                            Status = "Kissé morcos",
                            Type = "Sziámi"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<byte>("Month")
                        .HasMaxLength(12)
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Week")
                        .HasMaxLength(53)
                        .HasColumnType("tinyint");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ConsultationTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9b6115e-25e7-4638-b8cf-6e8d50cfcaaa"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("3aa47318-a237-4ac4-af6b-6751ddd9a591"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)46,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("e4b9fc1b-d4b6-4381-bc43-438f0318a210"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("fe65b404-8d24-4eeb-b77d-18a8a27e49e4"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("aacca0f1-b0c3-4194-a301-3c9b2c231cd3"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("8f469f59-4f05-4dc0-84b7-a722d1836c06"),
                            DayOfWeek = 1,
                            Description = "Hétfői rendelés.",
                            EmployeeId = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("5f3754ba-3621-42ac-9bb9-9adf777f2501"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("6bb00bd1-3d19-4412-ae4d-c8e882b00852"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("ba46f3af-16bd-4f9a-aac3-1d9e73e14035"),
                            DayOfWeek = 1,
                            Description = "Általános rendelési idő hétfőn.",
                            EmployeeId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("84b6008a-5e9b-4775-bcbf-4ae44013ee7f"),
                            DayOfWeek = 2,
                            Description = "Általános rendelési idő kedden.",
                            EmployeeId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("a3e9af46-94b5-42dd-9a1f-ef24834780a4"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("66ea1cdd-2697-4a5a-a785-007c7654971a"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)49,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("c8aa0dd3-910e-40ab-998c-a2387a1af5f6"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)50,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("f5857978-71bc-4484-85ba-7eb1df914916"),
                            DayOfWeek = 3,
                            Description = "Szerdai rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)51,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("fde43c6c-57b3-4ded-85c2-0208f1c3c547"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)47,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("358ddba0-bf31-4eff-8f92-a0afccbf8394"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)11,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)48,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("a5dfde18-43bf-4e59-852d-85b21486c6e3"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("455fc92b-6817-4740-a8df-7dce13d0622a"),
                            DayOfWeek = 5,
                            Description = "Pénteki rendelés.",
                            EmployeeId = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("74e5ea5c-ea80-4eb8-ad1c-3ca1768eff91"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)52,
                            Year = (short)2024
                        },
                        new
                        {
                            Id = new Guid("1a118924-1fa8-4b6a-9a4e-c3e8cc5638b6"),
                            DayOfWeek = 4,
                            Description = "Csütörtöki rendelés.",
                            EmployeeId = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsAvailable = true,
                            Month = (byte)12,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Week = (byte)53,
                            Year = (short)2024
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            Description = "Szakértő állatorvos.",
                            Name = "Dr. Vakarcs Pál",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("3174168b-330b-4157-8891-a62198bc8fd8"),
                            Description = "Sebész specialista.",
                            Name = "Dr. Szabó Éva",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("9caab3d8-3157-4db5-8925-62e8277ed5b5"),
                            Description = "Egzotikus állatok szakértője.",
                            Name = "Dr. Kiss Tamás",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("6c428cfd-ec5e-4bc3-9d99-6ccc9d1f16c7"),
                            Description = "A klinika segédje, minden munkában ott van.",
                            Name = "Hajdu Eszter",
                            Type = 2
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Medicine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreatmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76f25691-3d4f-4676-a460-fc6f626a73c6"),
                            Description = "Alapvizsgálat",
                            Length = 30,
                            Medicine = "Védőoltás",
                            TreatmentId = new Guid("47474773-d014-44ca-856b-8499c9ddcde2"),
                            Type = 1
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b17aeb04-2dfb-4993-99d3-ed2993869fd6"),
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A falu híres állatorvosa.",
                            Name = "Kovács János",
                            Residence = "Budapest"
                        },
                        new
                        {
                            Id = new Guid("36b6d1e6-a49a-4e9d-8cf2-8dc72d70bab8"),
                            BirthDate = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kutyakozmetikus, minden kutyát széppé varázsol.",
                            Name = "Szabó Katalin",
                            Residence = "Debrecen"
                        });
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Treatments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47474773-d014-44ca-856b-8499c9ddcde2"),
                            Amount = 15000m,
                            AnimalId = new Guid("487bfce6-86ba-4819-816a-a088dc4257c9"),
                            Date = new DateTime(2023, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rutin vizsgálat",
                            DoctorId = new Guid("2a2393a8-180c-4bab-82cc-9dbfed5f1cff"),
                            PersonId = new Guid("b17aeb04-2dfb-4993-99d3-ed2993869fd6")
                        });
                });

            modelBuilder.Entity("AnimalPerson", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", null)
                        .WithMany()
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.ConsultationTime", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Employee")
                        .WithMany("ConsultationTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Entry", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Entry", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrPetClinic.Data.Entities.Treatment", "Treatment")
                        .WithMany("Entries")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.HasOne("DrPetClinic.Data.Entities.Animal", "Animal")
                        .WithMany("Treatments")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Employee", "Doctor")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrPetClinic.Data.Entities.Person", "Person")
                        .WithMany("Treatments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Animal", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Employee", b =>
                {
                    b.Navigation("ConsultationTimes");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Person", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("DrPetClinic.Data.Entities.Treatment", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
